# -*- coding: utf-8 -*-
"""Khai thác dữ liệu phức tạp.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xf2zkX-sViQmX6kpz5GownXK0qb_f_G_

**TIME-SERIES ANALYSIS (DỰ BÁO CHUỖI THỜI GIAN)**
"""

## Dự báo giá cổ phiếu
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from statsmodels.tsa.arima.model import ARIMA
from statsmodels.tsa.statespace.sarimax import SARIMAX
from sklearn.metrics import mean_squared_error
from statsmodels.tsa.stattools import adfuller

# 1. Tạo dữ liệu chuỗi thời gian mẫu (giá cổ phiếu giả lập)
np.random.seed(42)
dates = pd.date_range(start="2020-01-01", periods=200, freq="D")
data = 50 + np.cumsum(np.random.normal(0, 1, 200))  # Giá cổ phiếu giả lập
ts_data = pd.DataFrame({"Date": dates, "Price": data})
ts_data.set_index("Date", inplace=True)

# 2. Kiểm tra tính dừng của chuỗi thời gian (ADF test)
result = adfuller(ts_data['Price'])
print(f"ADF Statistic: {result[0]}")
print(f"p-value: {result[1]}")

# Nếu p-value > 0.05, thực hiện differencing
if result[1] > 0.05:
    print("Chuỗi thời gian không dừng, cần thực hiện biến đổi (Differencing)")
    ts_data_diff = ts_data.diff().dropna()

    # Kiểm tra lại tính dừng sau khi differencing
    result = adfuller(ts_data_diff['Price'])
    print(f"ADF Statistic after differencing: {result[0]}")
    print(f"p-value after differencing: {result[1]}")

# 3. Chỉ định tần suất rõ ràng cho dữ liệu chuỗi thời gian
ts_data = ts_data.asfreq('D')

# 4. Chia dữ liệu thành tập huấn luyện và kiểm tra
train_size = int(len(ts_data) * 0.8)
train, test = ts_data[:train_size], ts_data[train_size:]

# 5. Xây dựng và huấn luyện mô hình ARIMA (ví dụ ARIMA(2, 1, 2))
model = ARIMA(train, order=(2, 1, 2))  # ARIMA(2, 1, 2) thử tham số khác
model_fit = model.fit()
print(model_fit.summary())

# 6. Dự báo trên tập kiểm tra
forecast = model_fit.forecast(steps=len(test))

# 7. Đánh giá kết quả dự báo ARIMA
mse_arima = mean_squared_error(test, forecast)
print(f"ARIMA Mean Squared Error: {mse_arima:.2f}")

# 8. Hiển thị kết quả dự báo ARIMA
plt.figure(figsize=(10, 6))
plt.plot(train, label="Dữ liệu huấn luyện")
plt.plot(test, label="Dữ liệu kiểm tra")
plt.plot(test.index, forecast, label="Dự báo ARIMA", color="red")
plt.title("Dự báo chuỗi thời gian với ARIMA")
plt.xlabel("Thời gian")
plt.ylabel("Giá")
plt.legend()
plt.show()

# 9. Xây dựng mô hình SARIMA (ví dụ SARIMAX(1, 1, 1) x (1, 1, 1, 12))
sarima_model = SARIMAX(train, order=(1, 1, 1), seasonal_order=(1, 1, 1, 12))  # SARIMA(1, 1, 1) x (1, 1, 1, 12)
sarima_model_fit = sarima_model.fit(disp=False)
print(sarima_model_fit.summary())

# 10. Dự báo trên mô hình SARIMA
sarima_forecast = sarima_model_fit.forecast(steps=len(test))

# 11. Đánh giá mô hình SARIMA
mse_sarima = mean_squared_error(test, sarima_forecast)
print(f"SARIMA Mean Squared Error: {mse_sarima:.2f}")

# 12. Hiển thị kết quả dự báo của SARIMA
plt.figure(figsize=(10, 6))
plt.plot(train, label="Dữ liệu huấn luyện")
plt.plot(test, label="Dữ liệu kiểm tra")
plt.plot(test.index, sarima_forecast, label="Dự báo SARIMA", color="green")
plt.title("Dự báo chuỗi thời gian với SARIMA")
plt.xlabel("Thời gian")
plt.ylabel("Giá")
plt.legend()
plt.show()

## Dự báo xu hướng thời tiết
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from statsmodels.tsa.arima.model import ARIMA
from sklearn.metrics import mean_squared_error

# 1. Tạo dữ liệu chuỗi thời gian giả lập (nhiệt độ hàng ngày)
np.random.seed(42)
dates = pd.date_range(start="2023-01-01", periods=365, freq="D")
data = 20 + 10 * np.sin(2 * np.pi * dates.dayofyear / 365) + np.random.normal(0, 2, 365)
ts_data = pd.DataFrame({"Date": dates, "Temperature": data})
ts_data.set_index("Date", inplace=True)

# 2. Hiển thị dữ liệu chuỗi thời gian
plt.figure(figsize=(10, 6))
plt.plot(ts_data, label="Nhiệt độ hàng ngày")
plt.title("Dữ liệu chuỗi thời gian: Nhiệt độ hàng ngày")
plt.xlabel("Thời gian")
plt.ylabel("Nhiệt độ (°C)")
plt.legend()
plt.show()

# 3. Chia dữ liệu thành tập huấn luyện và kiểm tra
train_size = int(len(ts_data) * 0.8)
train, test = ts_data[:train_size], ts_data[train_size:]

# 4. Xây dựng và huấn luyện mô hình ARIMA
model = ARIMA(train, order=(5, 1, 0))  # (p, d, q) = (5, 1, 0)
model_fit = model.fit()
print(model_fit.summary())

# 5. Dự báo trên tập kiểm tra
forecast = model_fit.forecast(steps=len(test))

# 6. Đánh giá kết quả dự báo
mse = mean_squared_error(test, forecast)
print(f"Mean Squared Error: {mse:.2f}")

# 7. Hiển thị kết quả dự báo
plt.figure(figsize=(10, 6))
plt.plot(train, label="Dữ liệu huấn luyện")
plt.plot(test, label="Dữ liệu kiểm tra")
plt.plot(test.index, forecast, label="Dự báo", color="red")
plt.title("Dự báo nhiệt độ hàng ngày với ARIMA")
plt.xlabel("Thời gian")
plt.ylabel("Nhiệt độ (°C)")
plt.legend()
plt.show()

"""**GRAPH MINING ( KHAI THÁC ĐỒ THỊ )**"""

import pandas as pd
import numpy as np
import networkx as nx
import matplotlib.pyplot as plt
import matplotlib.colors as mcolors
from networkx.algorithms.community import girvan_newman

# 1. Tạo đồ thị mẫu
G = nx.karate_club_graph()

# 2. Tính toán PageRank
pagerank_scores = nx.pagerank(G)

# 3. Phát hiện cộng đồng sử dụng thuật toán Girvan-Newman
communities_generator = girvan_newman(G)
communities = next(communities_generator)

# 4. Gán màu cho các cộng đồng
community_colors = list(mcolors.TABLEAU_COLORS.values())
color_map = {}
for i, community in enumerate(communities):
    for node in community:
        color_map[node] = community_colors[i % len(community_colors)]

# 5. Trực quan hóa đồ thị, PageRank và các cộng đồng
plt.figure(figsize=(12, 8))
pos = nx.spring_layout(G)

# Vẽ các nút với màu sắc theo cộng đồng
nx.draw_networkx_nodes(G, pos, node_size=[v * 3000 for v in pagerank_scores.values()],
                       node_color=[color_map[node] for node in G.nodes()], alpha=0.8)
# Vẽ các cạnh
nx.draw_networkx_edges(G, pos, alpha=0.5)
# Vẽ nhãn cho các nút
nx.draw_networkx_labels(G, pos, font_size=10)

plt.title("Trực quan hóa đồ thị với Girvan-Newman và PageRank")
plt.show()

# 6. In giá trị PageRank
print("Giá trị PageRank:")
for node, score in pagerank_scores.items():
    print(f"Nút {node}: PageRank score = {score:.4f}")